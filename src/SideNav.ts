import { LitElement, css, html } from "lit";
import { customElement, property } from "lit/decorators.js";
import { classMap } from "lit/directives/class-map.js";

import {
  RouteTreeItem,
  RouteTree,
  RouteTreeItemType,
  Route,
  Routes,
} from "./Routes";

/**
 * Main sidenav container element
 * Renders tree of nav links based on provided routes
 */
@customElement("design-docs-sidenav")
export class SideNavElement extends LitElement {
  /**
   * Flat array of routes
   */
  @property({ attribute: false, type: Array })
  routes: Routes = [];

  /**
   * Tree-structured array of routes, will ideally be generated by this component,
   * or possibly higher up to support title changes, TBD
   */
  @property({ attribute: false, type: Array })
  routeTree: RouteTree = [];

  @property({ attribute: true, type: Boolean })
  searchable = false;

  static styles = css`
    :host {
      font-family: var(--sidenav-font);
    }
    ul {
      margin-block-start: var(--sidenav-item-spacing, 0.25em);
      margin-block-end: var(--sidenav-item-spacing, 0.25em);
    }
    li:not(:first-child) {
      margin-top: var(--sidenav-item-spacing, 0.25em);
    }
    li:not(:last-child) {
      margin-bottom: var(--sidenav-item-spacing, 0.25em);
    }
    .hidden {
      display: none;
    }
  `;

  render() {
    const searchClasses = { hidden: !this.searchable };
    return html` <design-docs-sidenav-search
        @search=${this.onSearch}
        class=${classMap(searchClasses)}
      ></design-docs-sidenav-search>
      <nav>
        <ul>
          ${this.routeTree.map((item) => this.renderTreeItem(item))}
        </ul>
      </nav>`;
  }

  renderTreeItem(treeItem: RouteTreeItem) {
    if (treeItem.type === RouteTreeItemType.GROUP) {
      return html`<design-docs-sidenav-group label="${treeItem.label}">
        ${treeItem.children?.map((item) =>
          this.renderTreeItem(item)
        )}</design-docs-sidenav-group
      >`;
    } else {
      const route: Route = this.routes[treeItem.index];
      return html`<li><a href="${route.path}">${route.label}</a></li>`;
    }
  }

  private onSearch(event: SideNavSearchSearchEvent): void {
    console.info("Search happened!", event.detail);
  }
}

/**
 * An expandable group used by sidenav
 */
@customElement("design-docs-sidenav-group")
export class SideNavGroupElement extends LitElement {
  /**
   * Whether group is expanded. Updated on interaction
   */
  @property({ attribute: true, type: Boolean })
  expanded = false;

  /**
   * Label to render for group
   */
  @property()
  label = "";

  static styles = css`
    :host {
      font-family: var(--sidenav-font);
    }
    ul {
      margin-block-start: var(--sidenav-item-spacing, 0.25em);
      margin-block-end: var(--sidenav-item-spacing, 0.25em);
      padding-inline-start: var(--sidenav-group-indent, 1.25em);
    }
    li:not(:first-child) {
      margin-top: var(--sidenav-item-spacing, 0.25em);
    }
    li:not(:last-child) {
      margin-bottom: var(--sidenav-item-spacing, 0.25em);
    }
    span[aria-expanded="false"] + ul {
      display: none;
    }
  `;

  render() {
    return html` <li>
      <span
        @click="${this.toggleExpansion}"
        tabindex="-1"
        aria-expanded="${this.expanded}"
        aria-role="treeitem"
        >${this.label}</span
      >
      <ul>
        <slot></slot>
      </ul>
    </li>`;
  }

  private toggleExpansion() {
    this.expanded = !this.expanded;
  }
}

/**
 * Basic sidenav header with search
 */
@customElement("design-docs-sidenav-search")
export class SideNavSearchElement extends LitElement {
  /** Search input placeholder text */
  @property() placeholder = "Search";

  static styles = css`
    :host {
      font-family: var(--sidenav-font);
      display: flex;
      padding: var(--sidenav-item-spacing, 0.25em);
      background-color: var(--sidenav-accent-color, silver);
    }
    input {
      flex: 1;
    }
  `;

  render() {
    return html`<input
      type="search"
      placeholder="${this.placeholder}"
      @input=${this.onSearchChange}
    />`;
  }

  private onSearchChange(event: InputEvent): void {
    this.dispatchEvent(
      new CustomEvent("search", {
        detail: (event.target as HTMLInputElement).value,
        composed: true,
      })
    );
  }
}

export type SideNavSearchSearchEvent = CustomEvent<string>;
