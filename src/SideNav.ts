import { LitElement, css, html } from "lit";
import { customElement, property } from "lit/decorators.js";

import {
  RouteTreeItem,
  RouteTree,
  RouteTreeItemType,
  Route,
  Routes,
} from "./Routes";

/**
 * Main sidenav container element
 * Renders tree of nav links based on provided routes
 */
@customElement("design-docs-sidenav")
export class SideNavElement extends LitElement {
  /**
   * Flat array of routes
   */
  @property({ attribute: false, type: Array })
  routes: Routes = [];

  /**
   * Tree-structured array of routes, will ideally be generated by this component,
   * or possibly higher up to support title changes, TBD
   */
  @property({ attribute: false, type: Array })
  routeTree: RouteTree = [];

  constructor() {
    super();
  }

  render() {
    return html`<div>
      ${this.routeTree.map((item) => this.renderTreeItem(item))}
    </div>`;
  }

  renderTreeItem(treeItem: RouteTreeItem) {
    if (treeItem.type === RouteTreeItemType.GROUP) {
      return html`<design-docs-tree-group label="${treeItem.label}">
        ${treeItem.children?.map((item) =>
          this.renderTreeItem(item)
        )}</design-docs-tree-group
      >`;
    } else {
      const route: Route = this.routes[treeItem.index];
      return html`<li><a href="${route.path}">${route.label}</a></li>`;
    }
  }
}

/**
 * An expandable group used by sidenav
 */
@customElement("design-docs-tree-group")
export class TreeGroupElement extends LitElement {
  @property()
  expanded = false;

  @property()
  label = "";

  render() {
    return html`<li>
      <span
        @click="${this.toggleExpansion}"
        tabindex="-1"
        aria-expanded="${this.expanded}"
        aria-role="treeitem"
        >${this.label}</span
      >
      <ul style="${!this.expanded ? "display: none" : ""}">
        <slot></slot>
      </ul>
    </li>`;
  }

  private toggleExpansion() {
    this.expanded = !this.expanded;
  }
}
